/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MatchsInterface extends utils.Interface {
  contractName: "Matchs";
  functions: {
    "activeMatchsCount(string)": FunctionFragment;
    "allowedNftContract()": FunctionFragment;
    "bbone()": FunctionFragment;
    "claimReward(uint256[],uint256[],bytes32,bytes32,uint8)": FunctionFragment;
    "currentMatchForAddress(address)": FunctionFragment;
    "currentMatchForToken(uint256)": FunctionFragment;
    "joinMatch(uint256,string)": FunctionFragment;
    "lastMatchIdClaimedForAccount(address)": FunctionFragment;
    "mainSigner()": FunctionFragment;
    "matchCountPerRegion()": FunctionFragment;
    "matchDuration()": FunctionFragment;
    "matchForAddress(address)": FunctionFragment;
    "matchIdCounter()": FunctionFragment;
    "matchs(uint256)": FunctionFragment;
    "maxPlayersPerMatch()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "serverRegions(string)": FunctionFragment;
    "setMatchDuration(uint256)": FunctionFragment;
    "setMatchsPerRegion(uint256)": FunctionFragment;
    "setMaxPlayersPerMatch(uint256)": FunctionFragment;
    "setPortionRewardPerRank(uint256[])": FunctionFragment;
    "setServerRegion(string,bool)": FunctionFragment;
    "setStakingManager(address)": FunctionFragment;
    "stakingManager()": FunctionFragment;
    "tokenInMatch(uint256)": FunctionFragment;
    "totalRewardPerMatch()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeMatchsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedNftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bbone", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish[], BigNumberish[], BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMatchForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMatchForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinMatch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMatchIdClaimedForAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchCountPerRegion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPlayersPerMatch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serverRegions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchsPerRegion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPlayersPerMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPortionRewardPerRank",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setServerRegion",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPerMatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeMatchsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bbone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMatchForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMatchForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMatchIdClaimedForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchCountPerRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPlayersPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serverRegions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchsPerRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPlayersPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPortionRewardPerRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServerRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MatchDurationUpdated(uint256)": EventFragment;
    "MaxPlayersPerMatchUpdated(uint256)": EventFragment;
    "NewAddressInMatch(address,uint256,uint256)": EventFragment;
    "NewMatch(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PortionRewardPerRankUpdated(uint256[])": EventFragment;
    "RewardClaimed(address,uint256[],uint256)": EventFragment;
    "StakingManagerUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MatchDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxPlayersPerMatchUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAddressInMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PortionRewardPerRankUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingManagerUpdated"): EventFragment;
}

export type MatchDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { matchDuration: BigNumber }
>;

export type MatchDurationUpdatedEventFilter =
  TypedEventFilter<MatchDurationUpdatedEvent>;

export type MaxPlayersPerMatchUpdatedEvent = TypedEvent<
  [BigNumber],
  { maxPlayersPerMatch: BigNumber }
>;

export type MaxPlayersPerMatchUpdatedEventFilter =
  TypedEventFilter<MaxPlayersPerMatchUpdatedEvent>;

export type NewAddressInMatchEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { player: string; matchId: BigNumber; tokenId: BigNumber }
>;

export type NewAddressInMatchEventFilter =
  TypedEventFilter<NewAddressInMatchEvent>;

export type NewMatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    matchId: BigNumber;
    slot: BigNumber;
    timestamp: BigNumber;
    duration: BigNumber;
    maxPlayers: BigNumber;
  }
>;

export type NewMatchEventFilter = TypedEventFilter<NewMatchEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PortionRewardPerRankUpdatedEvent = TypedEvent<
  [BigNumber[]],
  { portionRewardPerRank: BigNumber[] }
>;

export type PortionRewardPerRankUpdatedEventFilter =
  TypedEventFilter<PortionRewardPerRankUpdatedEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  { player: string; matchIds: BigNumber[]; reward: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type StakingManagerUpdatedEvent = TypedEvent<
  [string],
  { matchDuration: string }
>;

export type StakingManagerUpdatedEventFilter =
  TypedEventFilter<StakingManagerUpdatedEvent>;

export interface Matchs extends BaseContract {
  contractName: "Matchs";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MatchsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    allowedNftContract(overrides?: CallOverrides): Promise<[string]>;

    bbone(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentMatchForToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mainSigner(overrides?: CallOverrides): Promise<[string]>;

    matchCountPerRegion(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
        matchId: BigNumber;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        inMatch: boolean;
      }
    >;

    matchIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        started: boolean;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        maxPlayers: BigNumber;
        slot: BigNumber;
      }
    >;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMatchsPerRegion(
      _matchCountPerRegion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPortionRewardPerRank(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<[string]>;

    tokenInMatch(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeMatchsCount(
    _region: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowedNftContract(overrides?: CallOverrides): Promise<string>;

  bbone(overrides?: CallOverrides): Promise<string>;

  claimReward(
    _matchIds: BigNumberish[],
    _ranks: BigNumberish[],
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMatchForAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentMatchForToken(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  joinMatch(
    _tokenId: BigNumberish,
    region: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastMatchIdClaimedForAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mainSigner(overrides?: CallOverrides): Promise<string>;

  matchCountPerRegion(overrides?: CallOverrides): Promise<BigNumber>;

  matchDuration(overrides?: CallOverrides): Promise<BigNumber>;

  matchForAddress(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
      matchId: BigNumber;
      finished: boolean;
      timestamp: BigNumber;
      duration: BigNumber;
      inMatch: boolean;
    }
  >;

  matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  matchs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      started: boolean;
      finished: boolean;
      timestamp: BigNumber;
      duration: BigNumber;
      maxPlayers: BigNumber;
      slot: BigNumber;
    }
  >;

  maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serverRegions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setMatchDuration(
    _matchDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMatchsPerRegion(
    _matchCountPerRegion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPlayersPerMatch(
    _maxPlayersPerMatch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPortionRewardPerRank(
    _portionRewardPerRank: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServerRegion(
    _name: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingManager(
    _stakingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingManager(overrides?: CallOverrides): Promise<string>;

  tokenInMatch(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedNftContract(overrides?: CallOverrides): Promise<string>;

    bbone(overrides?: CallOverrides): Promise<string>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMatchForToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainSigner(overrides?: CallOverrides): Promise<string>;

    matchCountPerRegion(overrides?: CallOverrides): Promise<BigNumber>;

    matchDuration(overrides?: CallOverrides): Promise<BigNumber>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
        matchId: BigNumber;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        inMatch: boolean;
      }
    >;

    matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        started: boolean;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        maxPlayers: BigNumber;
        slot: BigNumber;
      }
    >;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMatchsPerRegion(
      _matchCountPerRegion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPortionRewardPerRank(
      _portionRewardPerRank: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingManager(
      _stakingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingManager(overrides?: CallOverrides): Promise<string>;

    tokenInMatch(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MatchDurationUpdated(uint256)"(
      matchDuration?: null
    ): MatchDurationUpdatedEventFilter;
    MatchDurationUpdated(matchDuration?: null): MatchDurationUpdatedEventFilter;

    "MaxPlayersPerMatchUpdated(uint256)"(
      maxPlayersPerMatch?: null
    ): MaxPlayersPerMatchUpdatedEventFilter;
    MaxPlayersPerMatchUpdated(
      maxPlayersPerMatch?: null
    ): MaxPlayersPerMatchUpdatedEventFilter;

    "NewAddressInMatch(address,uint256,uint256)"(
      player?: null,
      matchId?: null,
      tokenId?: null
    ): NewAddressInMatchEventFilter;
    NewAddressInMatch(
      player?: null,
      matchId?: null,
      tokenId?: null
    ): NewAddressInMatchEventFilter;

    "NewMatch(uint256,uint256,uint256,uint256,uint256)"(
      matchId?: null,
      slot?: null,
      timestamp?: null,
      duration?: null,
      maxPlayers?: null
    ): NewMatchEventFilter;
    NewMatch(
      matchId?: null,
      slot?: null,
      timestamp?: null,
      duration?: null,
      maxPlayers?: null
    ): NewMatchEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PortionRewardPerRankUpdated(uint256[])"(
      portionRewardPerRank?: null
    ): PortionRewardPerRankUpdatedEventFilter;
    PortionRewardPerRankUpdated(
      portionRewardPerRank?: null
    ): PortionRewardPerRankUpdatedEventFilter;

    "RewardClaimed(address,uint256[],uint256)"(
      player?: null,
      matchIds?: null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      player?: null,
      matchIds?: null,
      reward?: null
    ): RewardClaimedEventFilter;

    "StakingManagerUpdated(address)"(
      matchDuration?: null
    ): StakingManagerUpdatedEventFilter;
    StakingManagerUpdated(
      matchDuration?: null
    ): StakingManagerUpdatedEventFilter;
  };

  estimateGas: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedNftContract(overrides?: CallOverrides): Promise<BigNumber>;

    bbone(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMatchForToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainSigner(overrides?: CallOverrides): Promise<BigNumber>;

    matchCountPerRegion(overrides?: CallOverrides): Promise<BigNumber>;

    matchDuration(overrides?: CallOverrides): Promise<BigNumber>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    matchs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMatchsPerRegion(
      _matchCountPerRegion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPortionRewardPerRank(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingManager(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInMatch(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedNftContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bbone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMatchForToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchCountPerRegion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPlayersPerMatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serverRegions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMatchsPerRegion(
      _matchCountPerRegion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPortionRewardPerRank(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInMatch(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardPerMatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
