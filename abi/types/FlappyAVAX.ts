/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IBobtailNFT {
  export type NftEntityExtendedStruct = {
    lvl: BigNumberish;
    exp: BigNumberish;
    revealed: BigNumberish;
    skin: BigNumberish;
    face: BigNumberish;
    rarity: BigNumberish;
    id: BigNumberish;
    timestampMint: BigNumberish;
    pendingReward: BigNumberish;
  };

  export type NftEntityExtendedStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lvl: number;
    exp: number;
    revealed: number;
    skin: BigNumber;
    face: BigNumber;
    rarity: BigNumber;
    id: BigNumber;
    timestampMint: BigNumber;
    pendingReward: BigNumber;
  };

  export type NftEntityStruct = {
    lvl: BigNumberish;
    exp: BigNumberish;
    timestampMint: BigNumberish;
    block: BigNumberish;
  };

  export type NftEntityStructOutput = [number, number, BigNumber, BigNumber] & {
    lvl: number;
    exp: number;
    timestampMint: BigNumber;
    block: BigNumber;
  };
}

export interface FlappyAVAXInterface extends utils.Interface {
  contractName: "FlappyAVAX";
  functions: {
    "MAX_LEVELXP()": FunctionFragment;
    "MAX_MINTSPERTX()": FunctionFragment;
    "MAX_SUPPLY()": FunctionFragment;
    "MINT_PRICE_AVAX()": FunctionFragment;
    "ONE_EXP_PER_TIME()": FunctionFragment;
    "REVEAL_TIME()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseSupply()": FunctionFragment;
    "bbone()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getLevelAndExp(uint256)": FunctionFragment;
    "getTokensInfo(uint256[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isRevealed(uint256)": FunctionFragment;
    "mintWithAvax(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setLevelAndExp(uint256,uint8,uint8)": FunctionFragment;
    "setStakingManager(address)": FunctionFragment;
    "stakingManager()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenInfo(uint256)": FunctionFragment;
    "tokenInfoExtended(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensOf(address)": FunctionFragment;
    "tokensWithInfoOf(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_LEVELXP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MINTSPERTX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_PRICE_AVAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_EXP_PER_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVEAL_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bbone", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelAndExp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithAvax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelAndExp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfoExtended",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokensOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokensWithInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LEVELXP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MINTSPERTX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINT_PRICE_AVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_EXP_PER_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bbone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelAndExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevealed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelAndExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenInfoExtended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensWithInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "LevelAndExpUpdated(uint256,uint8,uint8)": EventFragment;
    "NewMint(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingManagerUpdated(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelAndExpUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type LevelAndExpUpdatedEvent = TypedEvent<
  [BigNumber, number, number],
  { tokenId: BigNumber; lvl: number; exp: number }
>;

export type LevelAndExpUpdatedEventFilter =
  TypedEventFilter<LevelAndExpUpdatedEvent>;

export type NewMintEvent = TypedEvent<
  [BigNumber, BigNumber],
  { mintId: BigNumber; timestamp: BigNumber }
>;

export type NewMintEventFilter = TypedEventFilter<NewMintEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakingManagerUpdatedEvent = TypedEvent<
  [string],
  { stakingManager: string }
>;

export type StakingManagerUpdatedEventFilter =
  TypedEventFilter<StakingManagerUpdatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface FlappyAVAX extends BaseContract {
  contractName: "FlappyAVAX";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlappyAVAXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LEVELXP(overrides?: CallOverrides): Promise<[number]>;

    MAX_MINTSPERTX(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINT_PRICE_AVAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_EXP_PER_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVEAL_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    bbone(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLevelAndExp(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { level: number; exp: number }>;

    getTokensInfo(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[IBobtailNFT.NftEntityExtendedStructOutput[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevealed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLevelAndExp(
      _tokenId: BigNumberish,
      _lvl: BigNumberish,
      _exp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IBobtailNFT.NftEntityStructOutput]>;

    tokenInfoExtended(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IBobtailNFT.NftEntityExtendedStructOutput]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[IBobtailNFT.NftEntityExtendedStructOutput[]]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_LEVELXP(overrides?: CallOverrides): Promise<number>;

  MAX_MINTSPERTX(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MINT_PRICE_AVAX(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_EXP_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  REVEAL_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

  bbone(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLevelAndExp(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { level: number; exp: number }>;

  getTokensInfo(
    _tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<IBobtailNFT.NftEntityExtendedStructOutput[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevealed(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintWithAvax(
    _for: string,
    _quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLevelAndExp(
    _tokenId: BigNumberish,
    _lvl: BigNumberish,
    _exp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingManager(
    _stakingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingManager(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenInfo(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IBobtailNFT.NftEntityStructOutput>;

  tokenInfoExtended(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IBobtailNFT.NftEntityExtendedStructOutput>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  tokensWithInfoOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<IBobtailNFT.NftEntityExtendedStructOutput[]>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_LEVELXP(overrides?: CallOverrides): Promise<number>;

    MAX_MINTSPERTX(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_PRICE_AVAX(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_EXP_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    REVEAL_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    bbone(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLevelAndExp(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { level: number; exp: number }>;

    getTokensInfo(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<IBobtailNFT.NftEntityExtendedStructOutput[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevealed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLevelAndExp(
      _tokenId: BigNumberish,
      _lvl: BigNumberish,
      _exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingManager(
      _stakingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingManager(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IBobtailNFT.NftEntityStructOutput>;

    tokenInfoExtended(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IBobtailNFT.NftEntityExtendedStructOutput>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<IBobtailNFT.NftEntityExtendedStructOutput[]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "LevelAndExpUpdated(uint256,uint8,uint8)"(
      tokenId?: null,
      lvl?: null,
      exp?: null
    ): LevelAndExpUpdatedEventFilter;
    LevelAndExpUpdated(
      tokenId?: null,
      lvl?: null,
      exp?: null
    ): LevelAndExpUpdatedEventFilter;

    "NewMint(uint256,uint256)"(
      mintId?: null,
      timestamp?: null
    ): NewMintEventFilter;
    NewMint(mintId?: null, timestamp?: null): NewMintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakingManagerUpdated(address)"(
      stakingManager?: null
    ): StakingManagerUpdatedEventFilter;
    StakingManagerUpdated(
      stakingManager?: null
    ): StakingManagerUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    MAX_LEVELXP(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINTSPERTX(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_PRICE_AVAX(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_EXP_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    REVEAL_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    bbone(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelAndExp(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevealed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLevelAndExp(
      _tokenId: BigNumberish,
      _lvl: BigNumberish,
      _exp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingManager(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfoExtended(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LEVELXP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_MINTSPERTX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_PRICE_AVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_EXP_PER_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVEAL_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bbone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevelAndExp(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInfo(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevealed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLevelAndExp(
      _tokenId: BigNumberish,
      _lvl: BigNumberish,
      _exp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingManager(
      _stakingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfoExtended(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
