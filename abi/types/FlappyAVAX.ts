/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace FlappyAVAX {
  export type NftEntityExtendedStruct = {
    lvl: BigNumberish;
    exp: BigNumberish;
    revealed: BigNumberish;
    skin: BigNumberish;
    face: BigNumberish;
    rarity: BigNumberish;
    id: BigNumberish;
    timestampMint: BigNumberish;
    timestampStake: BigNumberish;
    pendingReward: BigNumberish;
  };

  export type NftEntityExtendedStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lvl: number;
    exp: number;
    revealed: number;
    skin: BigNumber;
    face: BigNumber;
    rarity: BigNumber;
    id: BigNumber;
    timestampMint: BigNumber;
    timestampStake: BigNumber;
    pendingReward: BigNumber;
  };
}

export interface FlappyAVAXInterface extends utils.Interface {
  contractName: "FlappyAVAX";
  functions: {
    "activeMatchsCount(string)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseSupply()": FunctionFragment;
    "bbone()": FunctionFragment;
    "claimReward(uint256[],uint256[],bytes32,bytes32,uint8)": FunctionFragment;
    "currentMatchForAddress(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getTokenInfo(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "joeRouter()": FunctionFragment;
    "joinMatch(uint256,string)": FunctionFragment;
    "lastMatchIdClaimedForAccount(address)": FunctionFragment;
    "mainSigner()": FunctionFragment;
    "matchForAddress(address)": FunctionFragment;
    "matchIdCounter()": FunctionFragment;
    "matchSlots(string,uint256)": FunctionFragment;
    "matchs(uint256)": FunctionFragment;
    "matchsPerRegionServer()": FunctionFragment;
    "maxPlayersPerMatch()": FunctionFragment;
    "maxStakingTokensPerAccount()": FunctionFragment;
    "mintWithAvax(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pairBboneAvax()": FunctionFragment;
    "rewardPerMinute()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "serverRegions(string)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMatchDuration(uint256)": FunctionFragment;
    "setMatchsPerRegion(uint256)": FunctionFragment;
    "setMaxPlayersPerMatch(uint256)": FunctionFragment;
    "setServerRegion(string,bool)": FunctionFragment;
    "stake(uint256[])": FunctionFragment;
    "stakedTokensOf(address)": FunctionFragment;
    "stakedTokensWithInfoOf(address)": FunctionFragment;
    "stakingCountForAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensOf(address)": FunctionFragment;
    "tokensWithInfoOf(address)": FunctionFragment;
    "totalRewardPerMatch()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateRewards(uint256[])": FunctionFragment;
    "withdraw(uint256[],bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeMatchsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bbone", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish[], BigNumberish[], BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMatchForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "joeRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinMatch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMatchIdClaimedForAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchSlots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchsPerRegionServer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPlayersPerMatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakingTokensPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithAvax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairBboneAvax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serverRegions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchsPerRegion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPlayersPerMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServerRegion",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokensOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokensWithInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingCountForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokensOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokensWithInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPerMatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[], boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeMatchsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bbone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMatchForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joeRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMatchIdClaimedForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchSlots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matchs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchsPerRegionServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPlayersPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakingTokensPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairBboneAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serverRegions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchsPerRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPlayersPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServerRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokensWithInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingCountForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensWithInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPerMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewAddressInMatch(address,uint256,uint256)": EventFragment;
    "NewMatch(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NewMint(uint256,uint256)": EventFragment;
    "RewardClaimed(address,uint256[],uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAddressInMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type NewAddressInMatchEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { player: string; matchId: BigNumber; tokenId: BigNumber }
>;

export type NewAddressInMatchEventFilter =
  TypedEventFilter<NewAddressInMatchEvent>;

export type NewMatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    matchId: BigNumber;
    slot: BigNumber;
    timestamp: BigNumber;
    duration: BigNumber;
    maxPlayers: BigNumber;
  }
>;

export type NewMatchEventFilter = TypedEventFilter<NewMatchEvent>;

export type NewMintEvent = TypedEvent<
  [BigNumber, BigNumber],
  { mintId: BigNumber; timestamp: BigNumber }
>;

export type NewMintEventFilter = TypedEventFilter<NewMintEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  { player: string; matchIds: BigNumber[]; reward: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface FlappyAVAX extends BaseContract {
  contractName: "FlappyAVAX";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlappyAVAXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    bbone(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FlappyAVAX.NftEntityExtendedStructOutput]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joeRouter(overrides?: CallOverrides): Promise<[string]>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mainSigner(overrides?: CallOverrides): Promise<[string]>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
        matchId: BigNumber;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        inMatch: boolean;
      }
    >;

    matchIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        started: boolean;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        maxPlayers: BigNumber;
        slot: BigNumber;
      }
    >;

    matchsPerRegionServer(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxStakingTokensPerAccount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairBboneAvax(overrides?: CallOverrides): Promise<[string]>;

    rewardPerMinute(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMatchsPerRegion(
      _matchsPerRegionServer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedTokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;

    stakedTokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FlappyAVAX.NftEntityExtendedStructOutput[]]>;

    stakingCountForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FlappyAVAX.NftEntityExtendedStructOutput[]]>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewards(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenIds: BigNumberish[],
      _unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeMatchsCount(
    _region: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

  bbone(overrides?: CallOverrides): Promise<string>;

  claimReward(
    _matchIds: BigNumberish[],
    _ranks: BigNumberish[],
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMatchForAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenInfo(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FlappyAVAX.NftEntityExtendedStructOutput>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joeRouter(overrides?: CallOverrides): Promise<string>;

  joinMatch(
    _tokenId: BigNumberish,
    region: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastMatchIdClaimedForAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mainSigner(overrides?: CallOverrides): Promise<string>;

  matchForAddress(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
      matchId: BigNumber;
      finished: boolean;
      timestamp: BigNumber;
      duration: BigNumber;
      inMatch: boolean;
    }
  >;

  matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  matchSlots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      started: boolean;
      finished: boolean;
      timestamp: BigNumber;
      duration: BigNumber;
      maxPlayers: BigNumber;
      slot: BigNumber;
    }
  >;

  matchsPerRegionServer(overrides?: CallOverrides): Promise<BigNumber>;

  maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

  maxStakingTokensPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  mintWithAvax(
    _for: string,
    _quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pairBboneAvax(overrides?: CallOverrides): Promise<string>;

  rewardPerMinute(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serverRegions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMatchDuration(
    _matchDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMatchsPerRegion(
    _matchsPerRegionServer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPlayersPerMatch(
    _maxPlayersPerMatch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServerRegion(
    _name: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedTokensOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stakedTokensWithInfoOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FlappyAVAX.NftEntityExtendedStructOutput[]>;

  stakingCountForAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  tokensWithInfoOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FlappyAVAX.NftEntityExtendedStructOutput[]>;

  totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewards(
    _portionRewardPerRank: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenIds: BigNumberish[],
    _unstake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    bbone(overrides?: CallOverrides): Promise<string>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FlappyAVAX.NftEntityExtendedStructOutput>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joeRouter(overrides?: CallOverrides): Promise<string>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainSigner(overrides?: CallOverrides): Promise<string>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, boolean] & {
        matchId: BigNumber;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        inMatch: boolean;
      }
    >;

    matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    matchSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        started: boolean;
        finished: boolean;
        timestamp: BigNumber;
        duration: BigNumber;
        maxPlayers: BigNumber;
        slot: BigNumber;
      }
    >;

    matchsPerRegionServer(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakingTokensPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pairBboneAvax(overrides?: CallOverrides): Promise<string>;

    rewardPerMinute(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMatchsPerRegion(
      _matchsPerRegionServer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    stakedTokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stakedTokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FlappyAVAX.NftEntityExtendedStructOutput[]>;

    stakingCountForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FlappyAVAX.NftEntityExtendedStructOutput[]>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(
      _portionRewardPerRank: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenIds: BigNumberish[],
      _unstake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "NewAddressInMatch(address,uint256,uint256)"(
      player?: null,
      matchId?: null,
      tokenId?: null
    ): NewAddressInMatchEventFilter;
    NewAddressInMatch(
      player?: null,
      matchId?: null,
      tokenId?: null
    ): NewAddressInMatchEventFilter;

    "NewMatch(uint256,uint256,uint256,uint256,uint256)"(
      matchId?: null,
      slot?: null,
      timestamp?: null,
      duration?: null,
      maxPlayers?: null
    ): NewMatchEventFilter;
    NewMatch(
      matchId?: null,
      slot?: null,
      timestamp?: null,
      duration?: null,
      maxPlayers?: null
    ): NewMatchEventFilter;

    "NewMint(uint256,uint256)"(
      mintId?: null,
      timestamp?: null
    ): NewMintEventFilter;
    NewMint(mintId?: null, timestamp?: null): NewMintEventFilter;

    "RewardClaimed(address,uint256[],uint256)"(
      player?: null,
      matchIds?: null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      player?: null,
      matchIds?: null,
      reward?: null
    ): RewardClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    bbone(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainSigner(overrides?: CallOverrides): Promise<BigNumber>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    matchSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    matchsPerRegionServer(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayersPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakingTokensPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairBboneAvax(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerMinute(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serverRegions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMatchsPerRegion(
      _matchsPerRegionServer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedTokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedTokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingCountForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardPerMatch(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewards(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenIds: BigNumberish[],
      _unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeMatchsCount(
      _region: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bbone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _matchIds: BigNumberish[],
      _ranks: BigNumberish[],
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMatchForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinMatch(
      _tokenId: BigNumberish,
      region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastMatchIdClaimedForAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchForAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchsPerRegionServer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPlayersPerMatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxStakingTokensPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintWithAvax(
      _for: string,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairBboneAvax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerMinute(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serverRegions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMatchDuration(
      _matchDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMatchsPerRegion(
      _matchsPerRegionServer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPlayersPerMatch(
      _maxPlayersPerMatch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServerRegion(
      _name: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedTokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedTokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingCountForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensWithInfoOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardPerMatch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewards(
      _portionRewardPerRank: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenIds: BigNumberish[],
      _unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
