/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingManager,
  StakingManagerInterface,
} from "../StakingManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bbone",
        type: "address",
      },
      {
        internalType: "address",
        name: "_flappyAvax",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "matchDuration",
        type: "address",
      },
    ],
    name: "MatchManagerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "maxStakingTokensPerAccount",
        type: "uint256",
      },
    ],
    name: "MaxStakingTokensPerAccountUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardPerMinute",
        type: "uint256",
      },
    ],
    name: "RewardPerMinuteUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "bbone",
    outputs: [
      {
        internalType: "contract IBBone",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "flappyAvax",
    outputs: [
      {
        internalType: "contract IBobtailNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isAddressStaking",
    outputs: [
      {
        internalType: "bool",
        name: "staked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "isStaked",
    outputs: [
      {
        internalType: "bool",
        name: "staked",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "timestampStake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "matchManager",
    outputs: [
      {
        internalType: "contract IBobtailMatchManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxStakingTokensPerAccount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerMinute",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_matchManager",
        type: "address",
      },
    ],
    name: "setMatchManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxStakingTokensPerAccount",
        type: "uint256",
      },
    ],
    name: "setMaxStakingTokensPerAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardPerMinute",
        type: "uint256",
      },
    ],
    name: "setRewardPerMinute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakedItems",
    outputs: [
      {
        internalType: "bool",
        name: "staked",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "timestampStake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "stakedTokensOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "stakedTokensWithInfoOf",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "lvl",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "exp",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "revealed",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "skin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "face",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rarity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestampMint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pendingReward",
            type: "uint256",
          },
        ],
        internalType: "struct IBobtailNFT.NftEntityExtended[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakingCountForAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "stakingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "_unstake",
        type: "bool",
      },
    ],
    name: "withdrawOrClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052670de0b6b3a7640000600255600a6003553480156200002257600080fd5b5060405162001cbf38038062001cbf8339810160408190526200004591620000d5565b620000503362000068565b6001600160a01b0391821660a052166080526200010d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d057600080fd5b919050565b60008060408385031215620000e957600080fd5b620000f483620000b8565b91506200010460208401620000b8565b90509250929050565b60805160a051611b46620001796000396000818161023c0152610e7901526000818161031c015281816104150152818161058c0152818161087a0152818161090a01528181610b2f01528181610d9501528181610f81015281816110d901526113280152611b466000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80635fd74fb0116100ad578063baa51f8611610071578063baa51f86146102d5578063cf35b8a114610317578063dec56fc31461033e578063f2fde38b14610351578063f99a8ac41461036457600080fd5b80635fd74fb014610276578063715018a6146102895780638da5cb5b14610291578063ab08d4fc146102a2578063af3a82cb146102c257600080fd5b806323de2a71116100f457806323de2a71146101ad57806327edc2a1146101f1578063290f1d0814610204578063366864c114610217578063476b6d921461023757600080fd5b80629bee371461013057806304d25d361461014c5780630811851b146101555780630fbf0a9314610178578063147c610e1461018d575b600080fd5b61013960035481565b6040519081526020015b60405180910390f35b61013960025481565b61016861016336600461151c565b610377565b6040519015158152602001610143565b61018b610186366004611539565b61038d565b005b61013961019b36600461151c565b60056020526000908152604090205481565b6101da6101bb3660046115ae565b6004602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610143565b61018b6101ff3660046115ae565b610728565b61018b61021236600461151c565b6107db565b61022a61022536600461151c565b610853565b60405161014391906115c7565b61025e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610143565b61018b610284366004611723565b6108fb565b61018b610ee2565b6000546001600160a01b031661025e565b6102b56102b036600461151c565b610f18565b60405161014391906117cb565b6101396102d03660046115ae565b610f29565b6101da6102e33660046115ae565b6000908152600460209081526040918290208251808401909352805460ff1615158084526001909101549290910182905291565b61025e7f000000000000000000000000000000000000000000000000000000000000000081565b61018b61034c3660046115ae565b6111bd565b61018b61035f36600461151c565b611268565b60015461025e906001600160a01b031681565b60008061038383611303565b5115159392505050565b60035461039b906001611825565b336000908152600560205260409020546103b6908390611825565b106104085760405162461bcd60e51b815260206004820152601d60248201527f4d617820746f6b656e73207374616b656420666f72206163636f756e7400000060448201526064015b60405180910390fd5b60005b81811015610723577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e8484848181106104545761045461183d565b905060200201356040518263ffffffff1660e01b815260040161047991815260200190565b602060405180830381865afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190611853565b6001600160a01b0316336001600160a01b0316146105115760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91036bab9ba1031329037bbb732b960611b60448201526064016103ff565b600460008484848181106105275761052761183d565b602090810292909201358352508101919091526040016000205460ff161561058a5760405162461bcd60e51b8152602060048201526016602482015275151bdad95b8818dd5c9c995b9d1b1e481cdd185ad95960521b60448201526064016103ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635055fbc38484848181106105cb576105cb61183d565b905060200201356040518263ffffffff1660e01b81526004016105f091815260200190565b602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190611870565b61067d5760405162461bcd60e51b815260206004820152601860248201527f546f6b656e2073686f756c642062652072657665616c6564000000000000000060448201526064016103ff565b6001600460008585858181106106955761069561183d565b90506020020135815260200190815260200160002060000160006101000a81548160ff02191690831515021790555042600460008585858181106106db576106db61183d565b602090810292909201358352508181019290925260409081016000908120600190810194909455338152600590925290208054909101905561071c8161188d565b905061040b565b505050565b6000546001600160a01b031633146107525760405162461bcd60e51b81526004016103ff906118a8565b60008111801561076357506103e881105b61079f5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642076616c756560981b60448201526064016103ff565b60028190556040518181527f710e3e36045e364190c5afcc342a6d29f171e456dd0bfd3ac1790cc646a21658906020015b60405180910390a150565b6000546001600160a01b031633146108055760405162461bcd60e51b81526004016103ff906118a8565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fcf6ec682a4d7b77576e2cf0c71673ef4bc1af85481dff636b4c69d7198e41930906020016107d0565b6060600061086083611303565b604051638048050360e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906380480503906108af9084906004016117cb565b600060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f491908101906118ee565b9392505050565b6000805b8351811015610e56577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e8583815181106109495761094961183d565b60200260200101516040518263ffffffff1660e01b815260040161096f91815260200190565b602060405180830381865afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190611853565b6001600160a01b0316336001600160a01b031614610a075760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91036bab9ba1031329037bbb732b960611b60448201526064016103ff565b600060046000868481518110610a1f57610a1f61183d565b60209081029190910181015182528181019290925260409081016000208151808301909252805460ff161515808352600190910154928201929092529150610a9c5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081cdd185ad95960821b60448201526064016103ff565b603f816020015142610aae91906119ff565b1015610afc5760405162461bcd60e51b815260206004820181905260248201527f4e65656420363320736563207374616b656420636c61696d2f756e7374616b6560448201526064016103ff565b610b1e858381518110610b1157610b1161183d565b6020026020010151610f29565b610b289084611825565b92506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639133f360888681518110610b6e57610b6e61183d565b60200260200101516040518263ffffffff1660e01b8152600401610b9491815260200190565b6040805180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611a16565b915091508515610d5e5760015487516001600160a01b039091169063885a502190899087908110610c0757610c0761183d565b60200260200101516040518263ffffffff1660e01b8152600401610c2d91815260200190565b602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190611870565b15610cbb5760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20696e206d617463682063616e277420756e7374616b650000000060448201526064016103ff565b600060046000898781518110610cd357610cd361183d565b6020908102919091018101518252810191909152604001600020805460ff1916911515919091179055610d0b4264121adb7000611825565b60046000898781518110610d2157610d2161183d565b6020908102919091018101518252818101929092526040908101600090812060010193909355338352600590915290208054600019019055610d93565b4260046000898781518110610d7557610d7561183d565b60200260200101518152602001908152602001600020600101819055505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630de613c7888681518110610dd457610dd461183d565b602002602001015184846040518463ffffffff1660e01b8152600401610e109392919092835260ff918216602084015216604082015260600190565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b5050505050505080610e4f9061188d565b90506108ff565b50801561072357604051637625088b60e11b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ec4a111690604401600060405180830381600087803b158015610ec557600080fd5b505af1158015610ed9573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314610f0c5760405162461bcd60e51b81526004016103ff906118a8565b610f1660006114b7565b565b6060610f2382611303565b92915050565b600081610f6b5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b881a5960821b60448201526064016103ff565b604051635055fbc360e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635055fbc390602401602060405180830381865afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff49190611870565b6110335760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881d5b9c995d99585b195960821b60448201526064016103ff565b6000828152600460209081526040918290208251808401909352805460ff161515808452600190910154918301919091526110a35760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081cdd185ad95960821b60448201526064016103ff565b60008160200151426110b591906119ff565b6040516304899f9b60e51b8152600481018690529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639133f360906024016040805180830381865afa15801561111f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111439190611a16565b5090506000611153603c84611a49565b6002546111609190611a6b565b9050600060648360ff161061118c5761117a606483611a49565b611185906064611a6b565b90506111a8565b60ff831661119b606484611a49565b6111a59190611a6b565b90505b6111b28282611825565b979650505050505050565b6000546001600160a01b031633146111e75760405162461bcd60e51b81526004016103ff906118a8565b6000811180156111f75750603281105b6112335760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642076616c756560981b60448201526064016103ff565b60038190556040518181527fc00d43384ab9c03d916a5bc5edb1619ff67c6ed3de95b59cb7c013aeab2f1b48906020016107d0565b6000546001600160a01b031633146112925760405162461bcd60e51b81526004016103ff906118a8565b6001600160a01b0381166112f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ff565b611300816114b7565b50565b604051632d1f933960e11b81526001600160a01b0382811660048301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690635a3f267290602401600060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113979190810190611a8a565b6001600160a01b03841660009081526005602052604090205490915080156114a05760008167ffffffffffffffff8111156113d4576113d4611670565b6040519080825280602002602001820160405280156113fd578160200160208202803683370190505b5090506000805b845181101561149557600460008683815181106114235761142361183d565b60209081029190910181015182528101919091526040016000205460ff1615611485578481815181106114585761145861183d565b60200260200101518383815181106114725761147261183d565b6020026020010181815250508160010191505b61148e8161188d565b9050611404565b509095945050505050565b505060408051600081526020810190915292915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461130057600080fd5b60006020828403121561152e57600080fd5b81356108f481611507565b6000806020838503121561154c57600080fd5b823567ffffffffffffffff8082111561156457600080fd5b818501915085601f83011261157857600080fd5b81358181111561158757600080fd5b8660208260051b850101111561159c57600080fd5b60209290920196919550909350505050565b6000602082840312156115c057600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015611663578151805160ff9081168652878201511687860152858101516116128787018260ff169052565b50606081810151908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100908101519085015261012090930192908501906001016115e4565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156116aa576116aa611670565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116d9576116d9611670565b604052919050565b600067ffffffffffffffff8211156116fb576116fb611670565b5060051b60200190565b801515811461130057600080fd5b803561171e81611705565b919050565b6000806040838503121561173657600080fd5b823567ffffffffffffffff81111561174d57600080fd5b8301601f8101851361175e57600080fd5b8035602061177361176e836116e1565b6116b0565b82815260059290921b8301810191818101908884111561179257600080fd5b938201935b838510156117b057843582529382019390820190611797565b95506117bf9050868201611713565b93505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611803578351835292840192918401916001016117e7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156118385761183861180f565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561186557600080fd5b81516108f481611507565b60006020828403121561188257600080fd5b81516108f481611705565b60006000198214156118a1576118a161180f565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805160ff8116811461171e57600080fd5b6000602080838503121561190157600080fd5b825167ffffffffffffffff81111561191857600080fd5b8301601f8101851361192957600080fd5b805161193761176e826116e1565b818152610120918202830184019184820191908884111561195757600080fd5b938501935b838510156119f35780858a0312156119745760008081fd5b61197c611686565b611985866118dd565b81526119928787016118dd565b8782015260406119a38188016118dd565b90820152606086810151908201526080808701519082015260a0808701519082015260c0808701519082015260e0808701519082015261010080870151908201528352938401939185019161195c565b50979650505050505050565b600082821015611a1157611a1161180f565b500390565b60008060408385031215611a2957600080fd5b611a32836118dd565b9150611a40602084016118dd565b90509250929050565b600082611a6657634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611a8557611a8561180f565b500290565b60006020808385031215611a9d57600080fd5b825167ffffffffffffffff811115611ab457600080fd5b8301601f81018513611ac557600080fd5b8051611ad361176e826116e1565b81815260059190911b82018301908381019087831115611af257600080fd5b928401925b828410156111b257835182529284019290840190611af756fea264697066735822122047676ac809c12f7da0ad14495b2079087c14229909d07ea971137030418dffea64736f6c634300080c0033";

type StakingManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingManager__factory extends ContractFactory {
  constructor(...args: StakingManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StakingManager";
  }

  deploy(
    _bbone: string,
    _flappyAvax: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingManager> {
    return super.deploy(
      _bbone,
      _flappyAvax,
      overrides || {}
    ) as Promise<StakingManager>;
  }
  getDeployTransaction(
    _bbone: string,
    _flappyAvax: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bbone, _flappyAvax, overrides || {});
  }
  attach(address: string): StakingManager {
    return super.attach(address) as StakingManager;
  }
  connect(signer: Signer): StakingManager__factory {
    return super.connect(signer) as StakingManager__factory;
  }
  static readonly contractName: "StakingManager";
  public readonly contractName: "StakingManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingManagerInterface {
    return new utils.Interface(_abi) as StakingManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingManager {
    return new Contract(address, _abi, signerOrProvider) as StakingManager;
  }
}
